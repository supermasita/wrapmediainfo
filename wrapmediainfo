#!/usr/bin/python3
# https://github.com/supermasita/wrapmediainfo

import xml.etree.ElementTree
import subprocess
import os.path
import tempfile

mediainfo_binary = "/usr/bin/mediainfo"
template_string = """General;<?xml version='1.0' encoding='UTF-8'?><file><track type='General'><filename>%CompleteName%</filename><filesize>%FileSize%</filesize><duration>%Duration%</duration></track>
Video;<track type='Video'><width>%Width%</width><height>%Height%</height><displayAspectRatio>%DisplayAspectRatio/String%</displayAspectRatio><videoFormat>%Format%</videoFormat><videoFormatProfile>%Format_Profile%</videoFormatProfile><videoCodec>%Codec/String%</videoCodec><videoBitrate>%BitRate%</videoBitrate></track>
Audio;<track type='Audio'><audioLanguage>%Language/String%</audioLanguage><audioChannels>%Channel(s)%</audioChannels><audioCodec>%Codec/String%</audioCodec><audioBitrate>%BitRate%</audioBitrate></track>
Text;<track type='Text'><sub>%Language/String%</sub><subCodec>%Codec%</subCodec></track>
File_End;</file>"""

def help():
    """
    Prints information about how to use the command. Returns string.
    """
    print("Usage: wrapmediainfo.py -f {filename}")
    exit(1)


def media_metadata_extract(filename):
    """
    Parses media metadata. Returns dictionary. 
    """
    if not os.path.isfile(mediainfo_binary):
        print("ERROR: {} does not exist".format(mediainfo_binary))
        exit(1)

    mediainfo_dict = {}
    
    with tempfile.NamedTemporaryFile() as template_file:
        template_file.write(bytes(template_string, 'UTF-8'))
        template_file.seek(0)
        try:
            command = "%s --Output=file://%s %s" % (
                mediainfo_binary, template_file.name, filename)

            output = subprocess.check_output(
                command, stderr=subprocess.STDOUT, shell=True, timeout=3,
                universal_newlines=True)
        except subprocess.CalledProcessError as e:
            mediainfo_dict["status"] = e.returncode
            mediainfo_dict["filesize"] = 0
            mediainfo_dict["filename"] = filename
        else:
            mediainfo_dict["status"] = 0
            root = xml.etree.ElementTree.fromstring(output)
            for child_of_root in root:
                for grandchild_of_root in child_of_root:
                    mediainfo_dict[grandchild_of_root.tag] = grandchild_of_root.text

    return mediainfo_dict


# Use from command line
if __name__ == '__main__':

    import sys
    import getopt

    argv = sys.argv[1:]
    opts, args = getopt.getopt(argv, "f:")

    if not opts:
        help()

    for opt, arg in opts:
        if opt == "-f":
            filename = arg

    mediainfo_dict = media_metadata_extract(filename)

    print(mediainfo_dict)
